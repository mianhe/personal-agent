---
description: 设计和定义子系统接口时需要遵循的规则和方法
globs: 
alwaysApply: false
---
为确保系统的可维护性、可扩展性和解耦性，所有子系统的接口定义必须遵循如下规范：

1. **接口文件的组织**
   - 接口文件必须放在子系统的 `api` 子目录下，如 src/personal_agent/mcp/api/server_registry_api.py
   - 接口文件命名应体现其主要职责，并以 `_api` 结尾
   - 一般情况下一个子系统只有一个接口文件，除非有明确不同职责时，可以创建多个接口文件，分别代表不同职责的接口
   - 在接口文件中，一组紧密相关的接口方应组成一个接口类。

2. **接口类的设计**
   - 接口类必须为纯抽象类（继承 `ABC`，所有方法用 `@abstractmethod` 标记），且每个接口类必须有 docstring 说明其职责。
   - 接口文件不包含任何实现代码，仅可定义接口类及与接口直接相关的数据结构（如 dataclass、TypedDict、pydantic.BaseModel 等），用于描述接口的输入、输出或领域对象。如有多个接口类，需确保各自职责边界清晰，避免重复。
   - 所有接口类、方法及相关数据结构必须完整标注类型注解，明确参数和返回值类型，确保类型契约清晰、可静态检查。
   - 接口定义符合契约式设计的原则，也就是“有限承诺，使命必答”。严格接口调用的前置条件，在遵守契约的前提下确保服务承诺，并保证后置条件的满足。
   - 应通过类型注解、docstring 和 icontract契约工具，明确表达前置条件、后置条件和不变式。前置条件约束调用方输入，后置条件约束方法输出和可观察副作用。不变式用于描述接口类在方法调用前后的稳定状态。契约应简明、无副作用，避免与类型注解和文档重复。
   - 典型接口文件示例：
     ```python
        from urllib.parse import urlparse
        from abc import ABC, abstractmethod
        from typing import List, Optional, Dict
        from icontract import require, ensure


        def is_valid_url(url: str) -> bool:
            if not isinstance(url, str) or not url:
                return False
            try:
                result = urlparse(url)
                return all([result.scheme, result.netloc])
            except Exception:
                return False


        class ServerRegistry(ABC):
            """
            MCP服务器注册与管理接口，负责服务器的增删查改。
            """

            @abstractmethod
            @ensure(lambda result: isinstance(result, list))
            def list_servers(self) -> List[Dict[str, str]]:
                """
                获取所有已注册的服务器信息。
                """

            @abstractmethod
            @require(
                lambda name: isinstance(name, str) and name != "", "服务器名称必须为非空字符串"
            )
            @require(is_valid_url, "服务器地址必须为合法的 URL")
            @ensure(lambda result: isinstance(result, bool))
            def add_server(self, name: str, url: str) -> bool:
                """
                添加新服务器。若名称重复则添加失败。
                """
     ```

3. **接口的对外暴露**
   - 子系统的接口通过 `__init__.py` 对外暴露，子系统只对外暴露接口和 container。
   - 其中 container 用于创建子系统内部元素，只能由 app 的 container 引用，用来创建和组装各个组件。
   - 典型的子系统 `__init__.py` 示例：
     ```python
     """
     chat 子系统职责：管理与用户的对话过程及对话历史，提供对话会话的创建、消息发送、历史查询等能力。
     """
     from .api.chat_service_api import ChatService
     from .container import Container

     __all__ = ["ChatService", "Container"]
     ```

