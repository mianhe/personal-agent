---
description: 
globs: 
alwaysApply: true
---
本介绍项目的开发流程，包括：1）整体开发模式及流程；2）需求、测试和代码的结构。它帮助智能开发工具在完成特定任务时明确：
- 在整体流程中的位置，确定所需要应用的规则
- 能够找到所需要的上下文信息，如：子系统和子系统的职责分配

本项目采用特性驱动（Feature Driven Development）和验收测试驱动（Acceptance Test Driven Development）开发模式。在这一模式下：

产品需求以特性文档的形式描述，特性文档采用"特性-功能点-验收标准"的层次结构。其中：
- **特性**：代表一个完整的产品或业务需求，解决特定的业务或产品问题，实现明确的产品和商业目标，并且可以独立发布。每个特性包含1到多个功能点。
- **功能点**：是一个具体的操作流程，通常由用户发起（如：录入和查询信息，执行系统命令等），也可以由其他系统发起（如来自其他系统或Agent的调用请求）。一个功能点通常包含多个验收标准。
- **验收标准**：对应功能点的一个具体业务规则，定义了该功能点的预期行为和验收条件。

## 开发流程概述

特性开发的第一步是根据特性文档生成验收测试框架。验收测试框架采用"测试文件-测试类-测试用例"的结构，与特性文档的结构一一对应：
- 每个**特性**对应一个**测试文件**
- 每个**功能点**对应一个**测试类**  
- 每个**验收标准**对应一个**测试用例**

测试框架及其docstring包含完整的特性描述，并用以驱动后续的系统开发和测试过程。

## 特性的开发流程

特性开发按功能点进行，每个功能点的开发包含以下主要步骤：

1. **基于特性文档生成验收测试框架**（对应规则1：acceptance-test-framework-generator）

选择一个功能点，按序执行以下流程步骤：

2. **基于功能点的操作流程，设计用户交互接口**（包括CLI或图形界面）（对应规则2：user-interaction-design）
3. **基于验收标准和用户交互设计，完成验收测试用例的具体实现**（对应规则3：acceptance-test-case-generator）
4. **基于操作流程设计子系统协作关系**，分析并分配各子系统的职责。必要时可能需要新增子系统（较少发生）（对应规则4：function-realization-design）
5. **基于子系统职责和协作关系，设计并定义子系统接口**，明确接口的契约和功能（对应规则5：subsystem-interface-design）
6. **基于接口定义、功能和契约，实现各个接口**，并通过子系统的`__init__.py`完成接口的对外导出（对应规则6：interface-realization）
7. **设计和实现接口测试**，确保各个子系统接口符合契约要求（对应规则7：interface-test）
8. **组装和连接各个子系统**，通过依赖注入（dependency injection）完成子系统的创建和系统组装（对应规则8：system_dependency_composition）
9. **执行验收测试验收功能点**，根据需要调整测试用例和系统代码，直至验收测试通过，并完成代码和测试的整理

选择下一个功能点，重复以上步骤，直至特性的所有功能点开发完成。

## 系统的架构
1. 系统的子系统划分和子系统的职责：/docs/design/subsystem_responsibility.md
2. 系统的上下文和关键业务案例：/docs/design/overall_design.md
